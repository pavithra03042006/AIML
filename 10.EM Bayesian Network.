import numpy as np
import pandas as pd
from pgmpy.models import DiscreteBayesianNetwork
from pgmpy.estimators import ExpectationMaximization as EM
from pgmpy.inference import VariableElimination

np.random.seed(42)
n_samples = 1000
data = pd.DataFrame({
    'Coin1': np.random.randint(0, 2, n_samples),
    'Coin2': np.random.randint(0, 2, n_samples)
})
model = DiscreteBayesianNetwork([('X', 'Coin1'), ('X', 'Coin2')], latents={'X'})
estimator = EM(model, data)
learned_cpds = estimator.get_parameters(latent_card={'X': 2})

model.add_cpds(*learned_cpds)
print("\nLearned CPDs:")
for cpd in model.get_cpds():
    print(cpd)
print("\nIs model valid?", model.check_model())

infer = VariableElimination(model)
query_result = infer.query(variables=['X'], evidence={'Coin1': 1, 'Coin2': 1})
print("\nInference result for P(X | Coin1=1, Coin2=1):")
print(query_result)

samples = model.simulate(n_samples=5)
print("\nGenerated samples from the learned model:")
print(samples)
