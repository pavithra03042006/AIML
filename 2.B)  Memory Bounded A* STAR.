import heapq
def memory_bounded_astar(graph, heuristic, start, goal, memory_limit):
    queue = [(heuristic[start], 0, start, [start])]
    visited = set()
    while queue:
        if len(queue) > memory_limit:
            queue.sort(reverse=True) 
            queue.pop(0)  

        f, g, node, path = heapq.heappop(queue)
        
        if node == goal:
            return path
        if node in visited:
            continue
        visited.add(node)
        
        for neighbor, cost in graph[node]:
            if neighbor not in visited:
                g_new = g + cost
                h_new = heuristic.get(neighbor, float('inf'))
                f_new = g_new + h_new
                heapq.heappush(queue, (f_new, g_new, neighbor, path + [neighbor]))
    
    return None

n = int(input("Enter the number of vertices: "))
graph = {i: [] for i in range(n)}
heuristic = {}

e = int(input("Enter the number of edges: "))
for _ in range(e):
    u, v, w, h = map(int, input("Edge (u v weight heuristic): ").split())
    graph[u].append((v, w))
    graph[v].append((u, w)) 
    if v not in heuristic:
        heuristic[v] = h 

start = int(input("Enter the start vertex: "))
goal = int(input("Enter the goal vertex: "))
memory_limit = int(input("Enter the memory limit (max number of nodes in queue): "))

path = memory_bounded_astar(graph, heuristic, start, goal, memory_limit)
print("Path:", ' -> '.join(map(str, path)) if path else "No path found")
